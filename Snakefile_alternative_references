configfile: "config.yaml"

import pandas as pd

# Read the MLSTs from the provided summary file
df = pd.read_csv('mlst_summary.tsv', sep = '\t')

# Check which entries are not ST38
notST38 = df['st']!='38'

# Make tuple out of non-ST38 strains
WITHOUTST38 = tuple(df[notST38].strain)

# Other ID tuples can be globbed from input dirs
WITHST38, = glob_wildcards("raw_illumina/{id}_1.fastq.gz")

rule all:
	input:
		"alternative_references/traveler_persistence_types_withoutST38_K12.tsv",
		"alternative_references/traveler_persistence_types_withoutST38_DSM30083.tsv",
		"alternative_references/comparison_table.tsv"

rule snippy_K12:
	input:
		fw = "trimmed_illumina/{sample}_1_AT_QT.fastq.gz",
		rv = "trimmed_illumina/{sample}_2_AT_QT.fastq.gz",
		K12 = config["snippy"]["K12_ST10"]
	output:
		K12 = directory("alternative_references/snippy_out_K12/{sample}")
	conda:
		"envs/snippy.yaml"
	params:
		general = config["snippy"]["general"]
	log:
		"logs/snippy_K12/{sample}.log"
	threads: 8
	shell:
		"""
		snippy {params.general} --cpus {threads} --outdir {output.K12} --ref {input.K12} --pe1 {input.fw} --pe2 {input.rv} 2>{log}
		"""

rule snippy_DSM30083:
	input:
		fw = "trimmed_illumina/{sample}_1_AT_QT.fastq.gz",
		rv = "trimmed_illumina/{sample}_2_AT_QT.fastq.gz",
		DSM30083 = config["snippy"]["DSM30083_ST95"]
	output:
		DSM30083 = directory("alternative_references/snippy_out_DSM30083/{sample}")
	conda:
		"envs/snippy.yaml"
	params:
		general = config["snippy"]["general"]
	log:
		"logs/snippy_DSM30083/{sample}.log"
	threads: 8
	shell:
		"""
		snippy {params.general} --cpus {threads} --outdir {output.DSM30083} --ref {input.DSM30083} --pe1 {input.fw} --pe2 {input.rv} 2>{log}
		"""

### SNP COMPARISONS K12
rule snippycore_withST38_K12:
	input:
		data = expand("alternative_references/snippy_out_K12/{sample}", sample=WITHST38),
		ref = config["snippy"]["K12_ST10"]
	output:
		full = "alternative_references/snippy-core_withST38_K12_out/core.full.aln",
		snps = "alternative_references/snippy-core_withST38_K12_out/core.aln"
	conda:
		"envs/snippy.yaml"
	params:
		outdir = "alternative_references/snippy-core_withST38_K12_out"
	log:
		"logs/snippycore_withST38_K12.log"
	shell:
		"""
		mkdir -p {params.outdir}
		snippy-core --ref {input.ref} {input.data} 2>&1>{log}
		mv core.aln core.full.aln core.tab core.vcf core.txt core.ref.fa {params.outdir}
		"""

rule snippycore_withoutST38_K12:
	input:
		data = expand("alternative_references/snippy_out_K12/{sample}", sample=WITHOUTST38),
		ref = config["snippy"]["K12_ST10"],
		dummy = "alternative_references/snippy-core_withST38_K12_out/core.full.aln"
	output:
		full = "alternative_references/snippy-core_withoutST38_K12_out/core.full.aln",
		snps = "alternative_references/snippy-core_withoutST38_K12_out/core.aln"
	conda:
		"envs/snippy.yaml"
	params:
		outdir = "alternative_references/snippy-core_withoutST38_K12_out"
	log:
		"logs/snippycore_withoutST38_K12.log"
	shell:
		"""
		mkdir -p {params.outdir}
		snippy-core --ref {input.ref} {input.data} 2>&1>{log}
		mv core.aln core.full.aln core.tab core.vcf core.txt core.ref.fa {params.outdir}
		"""

rule iqtree_withST38_K12:
	input:
		core = "alternative_references/snippy-core_withST38_K12_out/core.aln",
		fullcore = "alternative_references/snippy-core_withST38_K12_out/core.full.aln"
	output:
		directory("alternative_references/iqtree_withST38_K12_out")
	conda:
		"envs/iqtree_snp-sites.yaml"
	params:
		prefix = config["iqtree"]["prefix"]
	log:
		"logs/iqtree_withST38_K12.log"
	threads: 16
	shell:
		"""
		mkdir -p {output} && cd {output}
		iqtree -fconst $(snp-sites -C ../../{input.fullcore}) -nt AUTO -pre {params.prefix} -s ../../{input.core} 2>&1>../../{log}
		if [ -f {params.prefix}.treefile ]; then echo "{output}/{params.prefix}.treefile exists"; else exit 1; fi
		"""

rule iqtree_withoutST38_K12:
	input:
		core = "alternative_references/snippy-core_withoutST38_K12_out/core.aln",
		fullcore = "alternative_references/snippy-core_withoutST38_K12_out/core.full.aln",
		dummy = "alternative_references/iqtree_withST38_K12_out"
	output:
		directory("alternative_references/iqtree_withoutST38_K12_out")
	conda:
		"envs/iqtree_snp-sites.yaml"
	params:
		prefix = config["iqtree"]["prefix"]
	log:
		"logs/iqtree_withoutST38_K12.log"
	threads: 16
	shell:
		"""
		mkdir -p {output} && cd {output}
		iqtree -fconst $(snp-sites -C ../../{input.fullcore}) -nt AUTO -pre {params.prefix} -s ../../{input.core} 2>&1>../../{log}
		if [ -f {params.prefix}.treefile ]; then echo "{output}/{params.prefix}.treefile exists"; else exit 1; fi
		"""

rule clonalframeml_withST38_K12:
	input:
		tree = "alternative_references/iqtree_withST38_K12_out",
		aln = "alternative_references/snippy-core_withST38_K12_out/core.full.aln"
	output:
		directory("alternative_references/clonalframeml_withST38_K12_out")
	conda:
		"envs/clonalframeml.yaml"
	params:
		prefix = "COMBAT_clonalframeml",
		iqtreeprefix = config["iqtree"]["prefix"]
	log:
		"logs/clonalframeml_withST38_K12.log"
	threads: 16
	shell:
		"""
		mkdir -p {output} && cd {output}
		ClonalFrameML ../../{input.tree}/{params.iqtreeprefix}.treefile ../../{input.aln} {params.prefix} -show_progress true 2>&1>../../{log}
		if [ -f {params.prefix}.labelled_tree.newick ]; then echo "CFML output exists"; else exit 1; fi
		"""

rule clonalframeml_withoutST38_K12:
	input:
		tree = "alternative_references/iqtree_withoutST38_K12_out",
		aln = "alternative_references/snippy-core_withoutST38_K12_out/core.full.aln",
		dummy = "alternative_references/clonalframeml_withST38_K12_out"
	output:
		directory("alternative_references/clonalframeml_withoutST38_K12_out")
	conda:
		"envs/clonalframeml.yaml"
	params:
		prefix = "COMBAT_clonalframeml",
		iqtreeprefix = config["iqtree"]["prefix"]
	log:
		"logs/clonalframeml_withST38_K12.log"
	threads: 16
	shell:
		"""
		mkdir -p {output} && cd {output}
		ClonalFrameML ../../{input.tree}/{params.iqtreeprefix}.treefile ../../{input.aln} {params.prefix} -show_progress true 2>&1>../../{log}
		if [ -f {params.prefix}.labelled_tree.newick ]; then echo "CFML output exists"; else exit 1; fi
		"""

rule maskrc_withST38_K12:
	input:
		aln = "alternative_references/snippy-core_withST38_K12_out/core.full.aln",
		cfml = "alternative_references/clonalframeml_withST38_K12_out"
	output:
		"alternative_references/masked_withST38_K12.aln"
	conda:
		"envs/maskrc.yaml"
	params:
		prefix = "COMBAT_clonalframeml"
	log:
		"logs/maskrc.log"
	shell:
		"""
		bash scripts/download_maskrc.sh
		cd {input.cfml}
		python3 ../../maskrc-svg.py --aln ../../{input.aln} --out ../../{output} {params.prefix} 2>&1>../../{log}
		"""

rule maskrc_withoutST38_K12:
	input:
		aln = "alternative_references/snippy-core_withoutST38_K12_out/core.full.aln",
		cfml = "alternative_references/clonalframeml_withoutST38_K12_out",
		dummy = "alternative_references/masked_withST38_K12.aln"
	output:
		"alternative_references/masked_withoutST38_K12.aln"
	conda:
		"envs/maskrc.yaml"
	params:
		prefix = "COMBAT_clonalframeml"
	log:
		"logs/maskrc.log"
	shell:
		"""
		bash scripts/download_maskrc.sh
		cd {input.cfml}
		python3 ../../maskrc-svg.py --aln ../../{input.aln} --out ../../{output} {params.prefix} 2>&1>../../{log}
		"""

rule snp_dists_K12:
	input:
		ST38 = "alternative_references/masked_withST38_K12.aln",
		noST38 = "alternative_references/masked_withoutST38_K12.aln"
	output:
		snpmatstandard_withST38 = "alternative_references/snp_comparison_K12/snp_distances_standard_withST38_K12.tsv",
		snpmatnogaps_withST38 = "alternative_references/snp_comparison_K12/snp_distances_no_gaps_withST38_K12.tsv",
		snpmatstandard_withoutST38 = "alternative_references/snp_comparison_K12/snp_distances_standard_withoutST38_K12.tsv",
		snpmatnogaps_withoutST38 = "alternative_references/snp_comparison_K12/snp_distances_no_gaps_withoutST38_K12.tsv"
	conda:
		"envs/snp_comparisons.yaml"
	log:
		"logs/snp_dists_K12.log"
	shell:
		"""
		snp-dists -m {input.ST38} > {output.snpmatstandard_withST38}
		snp-sites -cb {input.ST38} | snp-dists -m /dev/stdin > {output.snpmatnogaps_withST38}
		snp-dists -m {input.noST38} > {output.snpmatstandard_withoutST38}
		snp-sites -cb {input.noST38} | snp-dists -m /dev/stdin > {output.snpmatnogaps_withoutST38}
		"""

rule alnlengths_K12:
	input:
		ST38 = "alternative_references/masked_withST38_K12.aln",
		noST38 = "alternative_references/masked_withoutST38_K12.aln"
	output:
		alnlengths_withST38 = "alternative_references/snp_comparison_K12/alnlengths_withST38_K12.tsv",
		alnlengths_withoutST38 = "alternative_references/snp_comparison_K12/alnlengths_withoutST38_K12.tsv"
	log:
		"logs/alnlengths_K12.log"
	shell:
		"""
		bash scripts/download_snp-dists-alnlengths.sh
		scripts/snp-dists-alnlengths -l {input.ST38} > {output.alnlengths_withST38} 2>{log}
		scripts/snp-dists-alnlengths -l {input.noST38} > {output.alnlengths_withoutST38} 2>>{log}
		"""

rule snp_comparisons_K12:
	input:
		ST38 = "alternative_references/masked_withST38_K12.aln",
		noST38 = "alternative_references/masked_withoutST38_K12.aln",
		snpmatstandard_withST38 = "alternative_references/snp_comparison_K12/snp_distances_standard_withST38_K12.tsv",
		snpmatnogaps_withST38 = "alternative_references/snp_comparison_K12/snp_distances_no_gaps_withST38_K12.tsv",
		snpmatstandard_withoutST38 = "alternative_references/snp_comparison_K12/snp_distances_standard_withoutST38_K12.tsv",
		snpmatnogaps_withoutST38 = "alternative_references/snp_comparison_K12/snp_distances_no_gaps_withoutST38_K12.tsv",
		metadata = "COMBAT_metadata.tsv",
		list_withST38 = "list_strains_withST38.txt",
		list_withoutST38 = "list_strains_withoutST38.txt",
		alnlengths_withST38 = "alternative_references/snp_comparison_K12/alnlengths_withST38_K12.tsv",
		alnlengths_withoutST38 = "alternative_references/snp_comparison_K12/alnlengths_withoutST38_K12.tsv"
	output:
		final_withST38 = "alternative_references/snp_comparison_K12/snp_comparisons_withST38_K12.tsv",
		final_withoutST38 = "alternative_references/snp_comparison_K12/snp_comparisons_withoutST38_K12.tsv"
	conda:
		"envs/snp_comparisons.yaml"
	log:
		"logs/snp_comparisons_K12.log"
	shell:
		"""
		python3 scripts/snp_comparisons.py {input.list_withST38} {input.snpmatstandard_withST38} {input.snpmatnogaps_withST38} {input.alnlengths_withST38} {output.final_withST38} 2>&1>{log}
		python3 scripts/snp_comparisons.py {input.list_withoutST38} {input.snpmatstandard_withoutST38} {input.snpmatnogaps_withoutST38} {input.alnlengths_withoutST38} {output.final_withoutST38} 2>&1>{log}
		"""

rule plot_snp_comparisons_K12:
	input:
		withST38 = "alternative_references/snp_comparison_K12/snp_comparisons_withST38_K12.tsv",
		withoutST38 = "alternative_references/snp_comparison_K12/snp_comparisons_withoutST38_K12.tsv"
	output:
		data_withST38 = "alternative_references/snp_comparison_K12/input_plot_SNP_threshold_withST38_K12.tsv",
		data_withoutST38 = "alternative_references/snp_comparison_K12/input_plot_SNP_threshold_withoutST38_K12.tsv",
		lineplot_withST38 = "alternative_references/snp_comparison_K12/snp_comparisons_K12_thresholds_lineplot_withST38.pdf",
		histo_withST38 = "alternative_references/snp_comparison_K12/snp_comparisons_K12_histogram_corrected_50_withST38.pdf",
		lineplot_withoutST38 = "alternative_references/snp_comparison_K12/snp_comparisons_K12_thresholds_lineplot_withoutST38.pdf",
		histo_withoutST38 = "alternative_references/snp_comparison_K12/snp_comparisons_K12_histogram_corrected_50_withoutST38.pdf"
	conda:
		"envs/snp_comparisons.yaml"
	params:
		basename = "alternative_references/snp_comparison_K12/snp_comparisons_K12"
	log:
		"logs/plot_snp_comparisons_K12.log"
	shell:
		"""
		python3 scripts/prepare_input_plot_SNP_threshold.py {input.withST38} > {output.data_withST38} 2>{log}
		python3 scripts/prepare_input_plot_SNP_threshold.py {input.withoutST38} > {output.data_withoutST38} 2>>{log}
		Rscript scripts/plot_SNP_threshold_histogram.R {input.withST38} {input.withoutST38} {params.basename} 2>&1>>{log}
		Rscript scripts/plot_SNP_threshold_lineplot.R {output.data_withST38} {output.data_withoutST38} {params.basename} 2>&1>>{log}
		"""

rule print_travelers_withST38_K12:
	input:
		lineplot = "alternative_references/snp_comparison_K12/snp_comparisons_K12_thresholds_lineplot_withST38.pdf",
		snpcomparisons = "alternative_references/snp_comparison_K12/snp_comparisons_withST38_K12.tsv"
	output:
		"alternative_references/traveler_persistence_types_withST38_K12.tsv"
	params:
		threshold_verylikely  =  config["print_travelers_withST38"]["threshold_verylikely"],
		threshold_likely =  config["print_travelers_withST38"]["threshold_likely"]
	conda:
		"envs/snp_comparisons.yaml"
	log:
		"logs/print_travelers_withST38_K12.log"
	shell:
		"""
		python3 scripts/print_travelers.py {params.threshold_verylikely} {params.threshold_likely} {input.snpcomparisons} > {output} 2>{log}
		"""

rule print_travelers_withoutST38_K12:
	input:
		lineplot = "alternative_references/snp_comparison_K12/snp_comparisons_K12_thresholds_lineplot_withoutST38.pdf",
		snpcomparisons = "alternative_references/snp_comparison_K12/snp_comparisons_withoutST38_K12.tsv"
	output:
		"alternative_references/traveler_persistence_types_withoutST38_K12.tsv"
	params:
		threshold_verylikely  =  config["print_travelers_withoutST38"]["threshold_verylikely"],
		threshold_likely =  config["print_travelers_withoutST38"]["threshold_likely"]
	conda:
		"envs/snp_comparisons.yaml"
	log:
		"logs/print_travelers_withoutST38_K12.log"
	shell:
		"""
		python3 scripts/print_travelers.py {params.threshold_verylikely} {params.threshold_likely} {input.snpcomparisons} > {output} 2>{log}
		"""

### SNP COMPARISONS DSM30083

rule snippycore_withST38_DSM30083:
	input:
		data = expand("alternative_references/snippy_out_DSM30083/{sample}", sample=WITHST38),
		ref = config["snippy"]["DSM30083_ST95"]
	output:
		full = "alternative_references/snippy-core_withST38_DSM30083_out/core.full.aln",
		snps = "alternative_references/snippy-core_withST38_DSM30083_out/core.aln"
	conda:
		"envs/snippy.yaml"
	params:
		outdir = "alternative_references/snippy-core_withST38_DSM30083_out"
	log:
		"logs/snippycore_withST38_DSM30083.log"
	shell:
		"""
		mkdir -p {params.outdir}
		snippy-core --ref {input.ref} {input.data} 2>&1>{log}
		mv core.aln core.full.aln core.tab core.vcf core.txt core.ref.fa {params.outdir}
		"""

rule snippycore_withoutST38_DSM30083:
	input:
		data = expand("alternative_references/snippy_out_DSM30083/{sample}", sample=WITHOUTST38),
		ref = config["snippy"]["DSM30083_ST95"],
		dummy = "alternative_references/snippy-core_withST38_DSM30083_out/core.full.aln"
	output:
		full = "alternative_references/snippy-core_withoutST38_DSM30083_out/core.full.aln",
		snps = "alternative_references/snippy-core_withoutST38_DSM30083_out/core.aln"
	conda:
		"envs/snippy.yaml"
	params:
		outdir = "alternative_references/snippy-core_withoutST38_DSM30083_out"
	log:
		"logs/snippycore_withoutST38_DSM30083.log"
	shell:
		"""
		mkdir -p {params.outdir}
		snippy-core --ref {input.ref} {input.data} 2>&1>{log}
		mv core.aln core.full.aln core.tab core.vcf core.txt core.ref.fa {params.outdir}
		"""

rule iqtree_withST38_DSM30083:
	input:
		core = "alternative_references/snippy-core_withST38_DSM30083_out/core.aln",
		fullcore = "alternative_references/snippy-core_withST38_DSM30083_out/core.full.aln"
	output:
		directory("alternative_references/iqtree_withST38_DSM30083_out")
	conda:
		"envs/iqtree_snp-sites.yaml"
	params:
		prefix = config["iqtree"]["prefix"]
	log:
		"logs/iqtree_withST38_DSM30083.log"
	threads: 16
	shell:
		"""
		mkdir -p {output} && cd {output}
		iqtree -fconst $(snp-sites -C ../../{input.fullcore}) -nt AUTO -pre {params.prefix} -s ../../{input.core} 2>&1>../../{log}
		if [ -f {params.prefix}.treefile ]; then echo "{output}/{params.prefix}.treefile exists"; else exit 1; fi
		"""

rule iqtree_withoutST38_DSM30083:
	input:
		core = "alternative_references/snippy-core_withoutST38_DSM30083_out/core.aln",
		fullcore = "alternative_references/snippy-core_withoutST38_DSM30083_out/core.full.aln",
		dummy = "alternative_references/iqtree_withST38_DSM30083_out"
	output:
		directory("alternative_references/iqtree_withoutST38_DSM30083_out")
	conda:
		"envs/iqtree_snp-sites.yaml"
	params:
		prefix = config["iqtree"]["prefix"]
	log:
		"logs/iqtree_withoutST38_DSM30083.log"
	threads: 16
	shell:
		"""
		mkdir -p {output} && cd {output}
		iqtree -fconst $(snp-sites -C ../../{input.fullcore}) -nt AUTO -pre {params.prefix} -s ../../{input.core} 2>&1>../../{log}
		if [ -f {params.prefix}.treefile ]; then echo "{output}/{params.prefix}.treefile exists"; else exit 1; fi
		"""

rule clonalframeml_withST38_DSM30083:
	input:
		tree = "alternative_references/iqtree_withST38_DSM30083_out",
		aln = "alternative_references/snippy-core_withST38_DSM30083_out/core.full.aln"
	output:
		directory("alternative_references/clonalframeml_withST38_DSM30083_out")
	conda:
		"envs/clonalframeml.yaml"
	params:
		prefix = "COMBAT_clonalframeml",
		iqtreeprefix = config["iqtree"]["prefix"]
	log:
		"logs/clonalframeml_withST38_DSM30083.log"
	threads: 16
	shell:
		"""
		mkdir -p {output} && cd {output}
		ClonalFrameML ../../{input.tree}/{params.iqtreeprefix}.treefile ../../{input.aln} {params.prefix} -show_progress true 2>&1>../../{log}
		if [ -f {params.prefix}.labelled_tree.newick ]; then echo "CFML output exists"; else exit 1; fi
		"""

rule clonalframeml_withoutST38_DSM30083:
	input:
		tree = "alternative_references/iqtree_withoutST38_DSM30083_out",
		aln = "alternative_references/snippy-core_withoutST38_DSM30083_out/core.full.aln",
		dummy = "alternative_references/clonalframeml_withST38_DSM30083_out"
	output:
		directory("alternative_references/clonalframeml_withoutST38_DSM30083_out")
	conda:
		"envs/clonalframeml.yaml"
	params:
		prefix = "COMBAT_clonalframeml",
		iqtreeprefix = config["iqtree"]["prefix"]
	log:
		"logs/clonalframeml_withST38_DSM30083.log"
	threads: 16
	shell:
		"""
		mkdir -p {output} && cd {output}
		ClonalFrameML ../../{input.tree}/{params.iqtreeprefix}.treefile ../../{input.aln} {params.prefix} -show_progress true 2>&1>../../{log}
		if [ -f {params.prefix}.labelled_tree.newick ]; then echo "CFML output exists"; else exit 1; fi
		"""

rule maskrc_withST38_DSM30083:
	input:
		aln = "alternative_references/snippy-core_withST38_DSM30083_out/core.full.aln",
		cfml = "alternative_references/clonalframeml_withST38_DSM30083_out"
	output:
		"alternative_references/masked_withST38_DSM30083.aln"
	conda:
		"envs/maskrc.yaml"
	params:
		prefix = "COMBAT_clonalframeml"
	log:
		"logs/maskrc.log"
	shell:
		"""
		bash scripts/download_maskrc.sh
		cd {input.cfml}
		python3 ../../maskrc-svg.py --aln ../../{input.aln} --out ../../{output} {params.prefix} 2>&1>../../{log}
		"""

rule maskrc_withoutST38_DSM30083:
	input:
		aln = "alternative_references/snippy-core_withoutST38_DSM30083_out/core.full.aln",
		cfml = "alternative_references/clonalframeml_withoutST38_DSM30083_out",
		dummy = "alternative_references/masked_withST38_DSM30083.aln"
	output:
		"alternative_references/masked_withoutST38_DSM30083.aln"
	conda:
		"envs/maskrc.yaml"
	params:
		prefix = "COMBAT_clonalframeml"
	log:
		"logs/maskrc.log"
	shell:
		"""
		bash scripts/download_maskrc.sh
		cd {input.cfml}
		python3 ../../maskrc-svg.py --aln ../../{input.aln} --out ../../{output} {params.prefix} 2>&1>../../{log}
		"""

rule snp_dists_DSM30083:
	input:
		ST38 = "alternative_references/masked_withST38_DSM30083.aln",
		noST38 = "alternative_references/masked_withoutST38_DSM30083.aln"
	output:
		snpmatstandard_withST38 = "alternative_references/snp_comparison_DSM30083/snp_distances_standard_withST38_DSM30083.tsv",
		snpmatnogaps_withST38 = "alternative_references/snp_comparison_DSM30083/snp_distances_no_gaps_withST38_DSM30083.tsv",
		snpmatstandard_withoutST38 = "alternative_references/snp_comparison_DSM30083/snp_distances_standard_withoutST38_DSM30083.tsv",
		snpmatnogaps_withoutST38 = "alternative_references/snp_comparison_DSM30083/snp_distances_no_gaps_withoutST38_DSM30083.tsv"
	conda:
		"envs/snp_comparisons.yaml"
	log:
		"logs/snp_dists_DSM30083.log"
	shell:
		"""
		snp-dists -m {input.ST38} > {output.snpmatstandard_withST38}
		snp-sites -cb {input.ST38} | snp-dists -m /dev/stdin > {output.snpmatnogaps_withST38}
		snp-dists -m {input.noST38} > {output.snpmatstandard_withoutST38}
		snp-sites -cb {input.noST38} | snp-dists -m /dev/stdin > {output.snpmatnogaps_withoutST38}
		"""

rule alnlengths_DSM30083:
	input:
		ST38 = "alternative_references/masked_withST38_DSM30083.aln",
		noST38 = "alternative_references/masked_withoutST38_DSM30083.aln"
	output:
		alnlengths_withST38 = "alternative_references/snp_comparison_DSM30083/alnlengths_withST38_DSM30083.tsv",
		alnlengths_withoutST38 = "alternative_references/snp_comparison_DSM30083/alnlengths_withoutST38_DSM30083.tsv"
	log:
		"logs/alnlengths_DSM30083.log"
	shell:
		"""
		bash scripts/download_snp-dists-alnlengths.sh
		scripts/snp-dists-alnlengths -l {input.ST38} > {output.alnlengths_withST38} 2>{log}
		scripts/snp-dists-alnlengths -l {input.noST38} > {output.alnlengths_withoutST38} 2>>{log}
		"""

rule snp_comparisons_DSM30083:
	input:
		ST38 = "alternative_references/masked_withST38_DSM30083.aln",
		noST38 = "alternative_references/masked_withoutST38_DSM30083.aln",
		snpmatstandard_withST38 = "alternative_references/snp_comparison_DSM30083/snp_distances_standard_withST38_DSM30083.tsv",
		snpmatnogaps_withST38 = "alternative_references/snp_comparison_DSM30083/snp_distances_no_gaps_withST38_DSM30083.tsv",
		snpmatstandard_withoutST38 = "alternative_references/snp_comparison_DSM30083/snp_distances_standard_withoutST38_DSM30083.tsv",
		snpmatnogaps_withoutST38 = "alternative_references/snp_comparison_DSM30083/snp_distances_no_gaps_withoutST38_DSM30083.tsv",
		metadata = "COMBAT_metadata.tsv",
		list_withST38 = "list_strains_withST38.txt",
		list_withoutST38 = "list_strains_withoutST38.txt",
		alnlengths_withST38 = "alternative_references/snp_comparison_DSM30083/alnlengths_withST38_DSM30083.tsv",
		alnlengths_withoutST38 = "alternative_references/snp_comparison_DSM30083/alnlengths_withoutST38_DSM30083.tsv"
	output:
		final_withST38 = "alternative_references/snp_comparison_DSM30083/snp_comparisons_withST38_DSM30083.tsv",
		final_withoutST38 = "alternative_references/snp_comparison_DSM30083/snp_comparisons_withoutST38_DSM30083.tsv"
	conda:
		"envs/snp_comparisons.yaml"
	log:
		"logs/snp_comparisons_DSM30083.log"
	shell:
		"""
		python3 scripts/snp_comparisons.py {input.list_withST38} {input.snpmatstandard_withST38} {input.snpmatnogaps_withST38} {input.alnlengths_withST38} {output.final_withST38} 2>&1>{log}
		python3 scripts/snp_comparisons.py {input.list_withoutST38} {input.snpmatstandard_withoutST38} {input.snpmatnogaps_withoutST38} {input.alnlengths_withoutST38} {output.final_withoutST38} 2>&1>{log}
		"""

rule plot_snp_comparisons_DSM30083:
	input:
		withST38 = "alternative_references/snp_comparison_DSM30083/snp_comparisons_withST38_DSM30083.tsv",
		withoutST38 = "alternative_references/snp_comparison_DSM30083/snp_comparisons_withoutST38_DSM30083.tsv"
	output:
		data_withST38 = "alternative_references/snp_comparison_DSM30083/input_plot_SNP_threshold_withST38_DSM30083.tsv",
		data_withoutST38 = "alternative_references/snp_comparison_DSM30083/input_plot_SNP_threshold_withoutST38_DSM30083.tsv",
		lineplot_withST38 = "alternative_references/snp_comparison_DSM30083/snp_comparisons_DSM30083_thresholds_lineplot_withST38.pdf",
		histo_withST38 = "alternative_references/snp_comparison_DSM30083/snp_comparisons_DSM30083_histogram_corrected_50_withST38.pdf",
		lineplot_withoutST38 = "alternative_references/snp_comparison_DSM30083/snp_comparisons_DSM30083_thresholds_lineplot_withoutST38.pdf",
		histo_withoutST38 = "alternative_references/snp_comparison_DSM30083/snp_comparisons_DSM30083_histogram_corrected_50_withoutST38.pdf"
	conda:
		"envs/snp_comparisons.yaml"
	params:
		basename = "alternative_references/snp_comparison_DSM30083/snp_comparisons_DSM30083"
	log:
		"logs/plot_snp_comparisons_DSM30083.log"
	shell:
		"""
		python3 scripts/prepare_input_plot_SNP_threshold.py {input.withST38} > {output.data_withST38} 2>{log}
		python3 scripts/prepare_input_plot_SNP_threshold.py {input.withoutST38} > {output.data_withoutST38} 2>>{log}
		Rscript scripts/plot_SNP_threshold_histogram.R {input.withST38} {input.withoutST38} {params.basename} 2>&1>>{log}
		Rscript scripts/plot_SNP_threshold_lineplot.R {output.data_withST38} {output.data_withoutST38} {params.basename} 2>&1>>{log}
		"""

rule print_travelers_withST38_DSM30083:
	input:
		lineplot = "alternative_references/snp_comparison_DSM30083/snp_comparisons_DSM30083_thresholds_lineplot_withST38.pdf",
		snpcomparisons = "alternative_references/snp_comparison_DSM30083/snp_comparisons_withST38_DSM30083.tsv"
	output:
		"alternative_references/traveler_persistence_types_withST38_DSM30083.tsv"
	params:
		threshold_verylikely  =  config["print_travelers_withST38"]["threshold_verylikely"],
		threshold_likely =  config["print_travelers_withST38"]["threshold_likely"]
	conda:
		"envs/snp_comparisons.yaml"
	log:
		"logs/print_travelers_withST38_DSM30083.log"
	shell:
		"""
		python3 scripts/print_travelers.py {params.threshold_verylikely} {params.threshold_likely} {input.snpcomparisons} > {output} 2>{log}
		"""

rule print_travelers_withoutST38_DSM30083:
	input:
		lineplot = "alternative_references/snp_comparison_DSM30083/snp_comparisons_DSM30083_thresholds_lineplot_withoutST38.pdf",
		snpcomparisons = "alternative_references/snp_comparison_DSM30083/snp_comparisons_withoutST38_DSM30083.tsv"
	output:
		"alternative_references/traveler_persistence_types_withoutST38_DSM30083.tsv"
	params:
		threshold_verylikely  =  config["print_travelers_withoutST38"]["threshold_verylikely"],
		threshold_likely =  config["print_travelers_withoutST38"]["threshold_likely"]
	conda:
		"envs/snp_comparisons.yaml"
	log:
		"logs/print_travelers_withoutST38_DSM30083.log"
	shell:
		"""
		python3 scripts/print_travelers.py {params.threshold_verylikely} {params.threshold_likely} {input.snpcomparisons} > {output} 2>{log}
		"""

rule print_comparison_table:
	input:
		ATCC = "snp_comparison/snp_comparisons_withoutST38.tsv",
		K12 = "alternative_references/snp_comparison_K12/snp_comparisons_withoutST38_K12.tsv",
		DSM = "alternative_references/snp_comparison_DSM30083/snp_comparisons_withoutST38_DSM30083.tsv"
	output:
		"alternative_references/comparison_table.tsv"
	conda:
		"envs/snp_comparisons.yaml"
	shell:
		"""
		python3 scripts/print_comparison_table.py {input.ATCC} {input.K12} {input.DSM} > {output}
		"""
